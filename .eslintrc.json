{
  "env": {
    "browser": true,
    "es2021": true
  },
  "overrides": [
    {
      "files": ["*.json", "*.json5"],
      "extends": [
        "eslint:recommended",
        "airbnb-base",
        "plugin:@intlify/vue-i18n/recommended",
        "prettier"
      ]
    },
    {
      "files": ["*.ts", "*.js", "*.vue"],
      "extends": [
        "airbnb-base",
        "airbnb-typescript/base",
        "@nuxtjs/eslint-config-typescript",
        "plugin:promise/recommended",
        "plugin:@intlify/vue-i18n/recommended",
        "plugin:vitest/recommended",
        "prettier"
      ],
      "rules": {
        "@intlify/vue-i18n/no-raw-text": [
          "warn",
          {
            "attributes": {
              "/.+/": [
                "title",
                "aria-label",
                "aria-placeholder",
                "aria-roledescription",
                "aria-valuetext"
              ],
              "input": ["placeholder"],
              "img": ["alt"]
            }
          }
        ],
        "no-param-reassign": ["error", { "props": false }],
        "@typescript-eslint/consistent-type-assertions": [
          "warn",
          { "assertionStyle": "never" }
        ],
        "import/consistent-type-specifier-style": ["error", "prefer-top-level"],
        "promise/always-return": "off"
      }
    },
    {
      "files": ["*.spec.ts"],
      "rules": {
        // Sometimes its too much of a hassle to implement the full type, so we want to cast and object having a subset of it.
        "@typescript-eslint/consistent-type-assertions": "off",

        // If I want an element to exist and the system to throw if not found. Useful when searching for UI elements to act on.
        "@typescript-eslint/no-non-null-assertion": "off",

        // If it doesn't exist or has the wrong type, the test should fail. Added to support calling methods of ".vue" files.
        "@typescript-eslint/no-unsafe-assignment": "off",
        "@typescript-eslint/no-unsafe-call": "off",
        "@typescript-eslint/no-unsafe-return": "off",
        "@typescript-eslint/no-unsafe-member-access": "off"
      }
    },
    {
      "files": ["vitest.config.ts", "cypress.config.ts", "cypress/**/*.ts"],
      "rules": {
        "vitest/expect-expect": "off",
        "import/no-extraneous-dependencies": [
          "error",
          { "devDependencies": true }
        ]
      }
    },
    {
      "files": ["stores/**/*.ts", "composables/**/*.ts"],
      "rules": {
        "import/prefer-default-export": "off"
      }
    },
    {
      "files": ["electron/**/*.ts"],
      "rules": {
        "import/no-extraneous-dependencies": "off"
      }
    }
  ],
  "parser": "vue-eslint-parser",
  "parserOptions": {
    "parser": "@typescript-eslint/parser",
    "ecmaVersion": "latest",
    "project": ["tsconfig.json"],
    "extraFileExtensions": [".vue"]
  },
  "plugins": ["vue", "@typescript-eslint", "vitest"],
  "rules": {
    "@intlify/vue-i18n/valid-message-syntax": "warn",
    "@intlify/vue-i18n/no-duplicate-keys-in-locale": "warn",
    "@intlify/vue-i18n/no-missing-keys-in-other-locales": "warn",
    "@intlify/vue-i18n/no-dynamic-keys": "warn",
    "@intlify/vue-i18n/no-unused-keys": [
      "warn",
      { "extensions": [".json", ".vue", ".ts"] }
    ]
  },
  "settings": {
    "import/core-modules": ["#app"],
    "vue-i18n": {
      "localeDir": "./locales/*.json"
    }
  }
}
